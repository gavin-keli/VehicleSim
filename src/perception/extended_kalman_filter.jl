using Infiltrator
using LinearAlgebra
using Random

"""
Unicycle model
"""

# 7-dims vector x = [p1, p2, v, Œ∏, l, w, h]
# REMOVE 2-dims vector u = [a, w]
# 8-dims vector z = [y1-4, y5-8] two camera views

# TODO change Function jac_fx, h, jac_hx, REMOVE Function jac_fu

function f(x, Œî)
    p1 = x[1]
    p2 = x[2]
    v = x[3]
    Œ∏ = x[4]
    l = x[5]
    w = x[6]
    h = x[7]

    [p1+Œî*v*cos(Œ∏), p2+Œî*v*sin(Œ∏), v, Œ∏, l, w, h]
end


"""
Jacobian of f with respect to x, evaluated at x,u,Œî.
"""
function jac_fx(x, u, Œî)
    v = x[3]
    Œ∏ = x[4]
    [1.0 0 Œî*cos(Œ∏) -Œî*v*sin(Œ∏);
     0 1.0 Œî*sin(Œ∏) Œî*v*cos(Œ∏);
     0 0 1.0 0;
     0 0 0 1]
end

"""
Non-standard measurement model. Can we extract state estimate from just this?
"""
function h(x)
    [x[3]*(x[1]+x[2]) + cos(x[4])*sin(x[4]),]
end

"""
Jacobian of h with respect to x, evaluated at x.
"""
function jac_hx(x)
    # make sure to return a 1x4 matrix (not a 4 dim vector or a 4x1 matrix)
    [x[3] x[3] (x[1]+x[2]) cos(x[4])^2-sin(x[4])^2;]
end


"""
Extended kalman filter implementation.

Assume that the 'true' physical update in the world is given by 

x‚Çñ = f(x‚Çñ‚Çã‚ÇÅ, u‚Çñ, Œî), where Œî is the time difference between times k and k-1.

Here, u‚Çñ is the 'true' controls applied to the system. These controls can be assumed to be a random variable,
with probability distribution given by ùí© (m‚Çñ, proc_cov) where m‚Çñ is some IMU-like measurement, and proc_cov is a constant covariance matrix.

The process model distribution is then approximated as:

P(x‚Çñ | x‚Çñ‚Çã‚ÇÅ, u‚Çñ) ‚âà ùí© ( Ax‚Çñ‚Çã‚ÇÅ + Bu‚Çñ + c, Œ£ÃÇ )

where 
A = ‚àá‚Çìf(Œº‚Çñ‚Çã‚ÇÅ, m‚Çñ, Œî),
B = ‚àá·µ§f(Œº‚Çñ‚Çã‚ÇÅ, m‚Çñ, Œî),
c = f(Œº‚Çñ‚Çã‚ÇÅ, m‚Çñ, Œî) - AŒº‚Çñ‚Çã‚ÇÅ - Bm‚Çñ

ŒºÃÇ = AŒº‚Çñ‚Çã‚ÇÅ + Bm‚Çñ + c
  = f(Œº‚Çñ‚Çã‚ÇÅ, m‚Çñ, Œî)
Œ£ÃÇ = A Œ£‚Çñ‚Çã‚ÇÅ A' + B proc_cov B', 


Further, assume that the 'true' measurement generation in the world is given by

z‚Çñ = h(x‚Çñ) + w‚Çñ,

where w‚Çñ is some additive gaussian noise with probability density function given by

ùí© (0, meas_var).

The measurement model is then approximated as 

P(z‚Çñ | x‚Çñ) ‚âà ùí© ( C x‚Çñ + d , meas_var )


where 
C = ‚àá‚Çì h(ŒºÃÇ), 
d = h(ŒºÃÇ) - CŒºÃÇ

The extended Kalman filter update equations can be implemented as the following:

Œ£‚Çñ = (Œ£ÃÇ‚Åª¬π + C' (meas_var)‚Åª¬π C)‚Åª¬π
Œº‚Çñ = Œ£‚Çñ ( Œ£ÃÇ‚Åª¬π ŒºÃÇ + C' (meas_var)‚Åª¬π (z‚Çñ - d) )

"""
function filter(; Œº=zeros(4), Œ£=Diagonal([5,5,3,1.0]), x0=zeros(4), num_steps=25, meas_freq=0.5, meas_jitter=0.025, meas_var=Diagonal([0.25,]), proc_cov = Diagonal([0.2, 0.1]), rng=MersenneTwister(5), output=true)
    gt_states = [x0,] # ground truth states that we will try to estimate
    timesteps = []
    u_constant = randn(rng) * [5.0, 0.2]
    Œºs = [Œº,]
    Œ£s = Matrix{Float64}[Œ£,]
    zs = Vector{Float64}[]

    u_prev = zeros(2)
    x_prev = x0

    for k = 1:num_steps
        u‚Çñ = u_constant
        m‚Çñ = u‚Çñ + sqrt(proc_cov) * randn(rng, 2) # Noisy IMU measurement.
        Œî = meas_freq + meas_jitter * (2*rand(rng) - 1)
        x‚Çñ = f(x_prev, u‚Çñ, Œî)
        x_prev = x‚Çñ
        u_prev = u‚Çñ
        z‚Çñ = h(x‚Çñ) + sqrt(meas_var) * randn(rng, 1)
        
        A = jac_fx(x_prev, m‚Çñ, Œî)
        B = jac_fu(x_prev, m‚Çñ, Œî)

        ŒºÃÇ = f(Œº, m‚Çñ, Œî)
        Œ£ÃÇ = A*Œ£*A' + B*proc_cov*B'

        C = jac_hx(ŒºÃÇ)
        d = h(ŒºÃÇ) - C*ŒºÃÇ
        
        Œ£ = inv(inv(Œ£ÃÇ) + C'*inv(meas_var)*C)
        Œº = Œ£ * (inv(Œ£ÃÇ) * ŒºÃÇ + C'*inv(meas_var) * (z‚Çñ - d))
         
        push!(Œºs, Œº)
        push!(Œ£s, Œ£)
        push!(zs, z‚Çñ)
        push!(gt_states, x‚Çñ)
        push!(timesteps, Œî)
        if output
            println("Ttimestep ", k, ":")
            println("   Ground truth (x,y): ", x‚Çñ[1:2])
            println("   Estimated (x,y): ", Œº[1:2])
            println("   Ground truth v: ", x‚Çñ[3])
            println("   estimated v: ", Œº[3])
            println("   Ground truth Œ∏: ", x‚Çñ[4])
            println("   estimated Œ∏: ", Œº[4])
            println("   measurement received: ", z‚Çñ)
            println("   Uncertainty measure (det(cov)): ", det(Œ£))
        end
    end

    (; Œºs, Œ£s)
end

"""
Inputs are 4 points bounding_boxes (2D) / 8-dims vector z = [y1-4, y5-8] two camera views
Outputs are 8 points (3D) maybe
"""
function  inverse_cameras(vehicles, state_channels, cam_channels; max_rate=10.0, focal_len = 0.01, pixel_len = 0.001, image_width = 640, image_height = 480)
    
end
